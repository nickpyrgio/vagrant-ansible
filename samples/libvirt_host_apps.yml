---

# SYNCED_FOLDERS DEFINTIONS
synced_folder_definitions:
  disabled: &disabled
    :src: "."
    :dest: "/vagrant"
    :options:
      :disabled: true
  default_nfs: &default_nfs
    :src: "."
    :dest: "/vagrant"
    :options:
      :disabled: false

# NETWORKS DEFINTIONS
network_definitions:
  db_private_network: &db_private_network
    :libvirt__network_name: db_private_network
    # :libvirt__network_address: "10.0.2.0"
    :libvirt__netmask: '255.255.255.0'
    :libvirt__forward_mode: veryisolated
    :libvirt__always_destroy: true
    :libvirt__dhcp_enabled: false
  libvirt_route_only: &libvirt_route_only
    :libvirt__network_name: libvirt_route_only
    # :libvirt__network_address: "10.0.2.0"
    :libvirt__netmask: '255.255.255.0'
    :libvirt__forward_mode: route
    :libvirt__always_destroy: true
    :libvirt__dhcp_enabled: false

# PROVISIONERS DEFINTIONS
provisioner_definitions:
  libvirtd_setup: &libvirtd_setup
    :name: libvirtd_setup
    :options: &libvirtd_setup_options
      :type: shell
      :path: scripts/libvirtd_setup.sh
      :run: once
  docker_setup: &docker_setup
    :name: docker_setup
    :options: &docker_setup_options
      :type: shell
      :path: scripts/docker_setup.sh
      :run: once
  vagrant_setup: &vagrant_setup
    :name: vagrant_setup
    :options: &vagrant_setup_options
      :type: shell
      :path: scripts/vagrant_setup.sh
      # :upload_path: /usr/local/bin/vagrant_setup.sh
  cleanup_shell_provisioner: &cleanup_shell_provisioner
    :name: cleanup_shell_provisioner
    :options: &cleanup_shell_provisioner_options
      :type: shell
      :inline: test -f /tmp/vagrant-shell && rm /tmp/vagrant-shell
      :run: once
      :after: :each
  vagrant_ansible_project: &vagrant_ansible_project
    :name: vagrant_ansible_project
    :options: &vagrant_ansible_project_options
      :type: file
      :source: '.'
      :destination: ~/vagrant-ansible-test
      :run: never
  ansible_provisioner_common: &ansible_provisioner_common
    :name: ansible_common
    # export ansible_playbook_dir="ansible"
    :ansible_playbook_dir: !Env COMMON_ANSIBLE_PLAYBOOK_DIR
    :ansible_playbook: sample_playbook.yml
    :ansible_serial_deployment: no
    :options: &ansible_provisioner_common_options
      :type: ansible
      :compatibility_mode: "2.0"
      :verbose: "v"
      :become: true
      :become_user: root
      :groups:
        :database_servers: ["db1", "db2", "db3"]
        :application_servers: ["appsrv1", "appsrv2"]
        :loadbalancer_servers: ["lb1", "lb2"]
        :database_servers:vars:
          :database_group_var: "This is a database_servers group ansible variable"
          :database_group_dict: !Json # We add the json tag so the variable will be parsed correctly by ansible as a dictionary
            :key: value
  bootstrap_deployment: &bootstrap_deployment
    <<: *ansible_provisioner_common
    :name: bootstrap_deployment
    :ansible_serial_deployment: true
    :options: &bootstrap_deployment_options
      <<: *ansible_provisioner_common_options
      :before: :all
      :playbook: ansible/bootstrap.yml
  database_deployment: &database_deployment
    <<: *ansible_provisioner_common
    :ansible_playbook: database.yml
    :name: database_deployment
    :options: &database_deployment_options
      <<: *ansible_provisioner_common_options
      :limit: database_servers
      :extra_vars:
        installdb:
          db1:
            key: value
          db2:
            key: value
  appserver_deployment: &appserver_deployment
    <<: *ansible_provisioner_common
    :ansible_playbook: appsrv.yml
    :name: appserver_deployment
    :options: &appserver_deployment_options
      <<: *ansible_provisioner_common_options
      :limit:  application_servers
  loadbalancer_deployment: &loadbalancer_deployment
    <<: *ansible_provisioner_common
    :name: loadbalancer_deployment
    :options: &loadbalancer_deployment_options
      <<: *ansible_provisioner_common_options
      :limit:  lb1
      :playbook: ansible/loadbalancer.yml

hypervisor_definitions:
  :localhost:
    # :uri: qemu:///system
    :uri: !Env LIBVIRT_DEFAULT_URI
  :libvirt1:
    :hypervisor_host: libvirt1
    :hypervisor_user: root
    :hypervisor_id_ssh_key_file: id_rsa
    :hypervisor_connect_via_ssh: true
    :hypervisor_proxy_command: ssh {host} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -l {username} -i {id_ssh_key_file} -W %h:%p

forward_definitions:
  :ssh: &forward_ssh_all
    :host_ip: "0.0.0.0"
    :guest: 22
  :http: &forward_http_all
    :host_ip: "0.0.0.0"
    :guest: 80
  :https: &forward_https_all
    :host_ip: "0.0.0.0"
    :guest: 443

# Default values for all servers. Override on lab level, or server level
default_global_settings:
  # Optional, defaults to localhost, and virsh connect string to the LIBVIRT_DEFAULT_URI env variable value
  :hypervisor_name: "localhost"
  :ram: 1024M # Always define
  :cpus: 1 # Always define
  :cpuaffinitiy: null # Optional dict
  :cputopology: null # Optional string
  :numa_nodes: null # Optional string
  :nested: false # Optional, defaults to false
  :autostart: false # Libvirt autostart. Optional defaults to false
  :qemu_use_agent: false # Optional defaults to false
  :mgmt_attach: true # Defaults to false, define if management network is required
  :management_network: &management_network # Always define
    # Always set when mgmt_attach is true
    :management_network_name: 'vagrant-libvirt'
    :management_network_address: "192.168.121.0/24"
    # Optional. These are the default values.
    :management_network_keep: false
    :management_network_autostart: true
    :management_network_domain: null
    :management_network_mtu: null
    :management_network_iface_name: null
    :management_network_mode: null
    :management_network_model_type: virtio
    :mac: null
  :box: "debian/bookworm64" # Always define
  :synced_folders:
    - disabled
  # Optional
  :forwards: []
  :private_networks: []
  :public_networks: []
  :storage: []
  :server_index_weight: 0 # If unchanged vms will be created in the order defined.
  # Custom provisioners
  :provisioners: []
  :vagrant_autostart: true # This settings configures if a server will start when vagrant up is run
  :primary: false
  :vagrant_ssh_config:
     # If true then ssh will be configured before provisioning. Useful if custom box is build
    :configure_before_provision: false
    :username: !Env VAGRANT_SSH_USERNAME
    :private_key_path: !Env VAGRANT_SSH_PRIVATE_KEY_PATH
  # Custom non vagrantfile variables. Can be used in our ansible roles
  :ssh_key: !Env VAGRANT_ANSIBLE_SSH_PUBLIC_KEY # This will be replaced by VAGRANT_ANSIBLE_SSH_PUBLIC_KEY environmental variable

labs:
  default:
    servers: []
  libvirt:
    lab_settings:
      :nested: true
      :provisioners:
        - <<: *libvirtd_setup
          :options:
            <<: *libvirtd_setup_options
            :env:
              LIBVIRTD_USER: vagrant
              LIBVIRTD_MANAGEMENT_NETWORK_NAME: &libvirt1_management_network libvirt1_management_network
              LIBVIRTD_MANAGEMENT_BRIDGE_NAME: libvirt1
              LIBVIRTD_MANAGEMENT_NETWORK_PREFIX: "10.0.0."
              LIBVIRTD_MANAGEMENT_HOST_IP_SUFFIX: "254"
              LIBVIRTD_MANAGEMENT_HOST_IP_MAC: aa:aa:aa:8a:32:54
              LIBVIRTD_MANAGEMENT_NETWORK_DHCP_START: "1"
              LIBVIRTD_MANAGEMENT_NETWORK_DHCP_END: "200"
              LIBVIRTD_MANAGEMENT_NETWORK_ADDRESS: &libvirt1_management_network_address "10.0.0.0/24"
              # This will be replaced by VAGRANT_ANSIBLE_SSH_PUBLIC_KEY environmental variable
              SSH_PUBLIC_KEY: !Env VAGRANT_ANSIBLE_SSH_PUBLIC_KEY
        - *vagrant_setup
        - *vagrant_ansible_project
        - *docker_setup
        - *cleanup_shell_provisioner
    servers:
      - :hostname: &libvirt1_hostname libvirt1
        :private_networks:
          - <<: *libvirt_route_only
            :ip: "10.30.30.12"
            # :libvirt__adapter: 2
            :libvirt__iface_name: libvirt0
        :vagrant_ssh_config:
          :forward_agent: true
        :forwards:
          - <<: *forward_ssh_all
            :host: 2210
        :ram: 8196
        :cpus: 4
        :ip_address_offset: 254 # It will get the ip 192.168.121.254/24 by dhcp
        :management_network:
          <<: *management_network
          :mac: aa:aa:aa:95:12:54
  webapp: # Set the value of each lab in vagrant-ansible-provision.conf.rb
    lab_settings:
      :cpus: 2
      :hypervisor_name: *libvirt1_hostname
      :management_network:
        :management_network_name: *libvirt1_management_network
        :management_network_address: *libvirt1_management_network_address
      :provisioners:
        - *bootstrap_deployment
        - *database_deployment
        - *appserver_deployment
        - *loadbalancer_deployment
    servers:
      - :hostname: db1
        :ram: 512M
        :server_index_weight: 1
        :private_networks:
          - <<: *db_private_network
            :ip: "10.20.30.11"
            :libvirt__iface_name: guest_dbif1
        :storage: &db_storage
          - :size: 10G
            :pool: default
      - :hostname: db2
        :ram: 512M
        :server_index_weight: 2
        :private_networks:
          - <<: *db_private_network
            :ip: "10.20.30.12"
            # :libvirt__adapter: 2
            :libvirt__iface_name: guest_dbif2
        :storage: *db_storage
      - :hostname: appsrv1
        :server_index_weight: 3
      - :hostname: appsrv2
        :server_index_weight: 4
        :primary: true
      - :hostname: lb1
        :cpus: 1
        :server_index_weight: 5
      - :hostname: appsrv-standalone
        :server_index_weight: 6
        :provisioners:
          - <<: *appserver_deployment
            # :name: appserver_standalone_deployment
            :ansible_serial_deployment: true
            :options:
              <<: *appserver_deployment_options
      - :hostname: db3 # Add new server and rerun vagrant up --provision-with database_deployment
        :ram: 512M
        :server_index_weight: 7 # This will make sure the playbook starts after this new server is created
        :storage: *db_storage
        :private_networks:
          - <<: *db_private_network
            :ip: "10.20.30.13"
            :libvirt__iface_name: guest_dbif3
